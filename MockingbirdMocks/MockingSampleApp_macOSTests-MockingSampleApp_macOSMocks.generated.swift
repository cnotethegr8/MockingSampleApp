//
//  MockingSampleApp_macOSTests-MockingSampleApp_macOSMocks.generated.swift
//  MockingSampleApp_macOS
//
//  Generated by Mockingbird v0.12.0.
//  DO NOT EDIT
//

@testable import Mockingbird
import Cocoa
import Foundation
import Swift

private var genericTypesStaticMocks = Mockingbird.Synchronized<[String: Mockingbird.StaticMock]>([:])

// MARK: - Mocked AppDelegate

public final class AppDelegateMock: MockingSampleApp_macOS.AppDelegate, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.12.0", "module_name": "MockingSampleApp_macOS"])
  public var sourceLocation: Mockingbird.SourceLocation? {
    get { return stubbingContext.sourceLocation }
    set {
      stubbingContext.sourceLocation = newValue
      AppDelegateMock.staticMock.stubbingContext.sourceLocation = newValue
    }
  }

  public enum InitializerProxy {}

  // MARK: Mocked `applicationDidFinishLaunching`(_ `aNotification`: Notification)

  public override func `applicationDidFinishLaunching`(_ `aNotification`: Notification) -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`applicationDidFinishLaunching`(_ `aNotification`: Notification) -> Void", arguments: [Mockingbird.ArgumentMatcher(`aNotification`)])
    mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? (Notification) -> Void {
        concreteImplementation(`aNotification`)
      } else if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `applicationDidFinishLaunching`(_ `aNotification`: @escaping @autoclosure () -> Notification) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (Notification) -> Void, Void> {
    let arguments: [Mockingbird.ArgumentMatcher] = [Mockingbird.resolve(`aNotification`)]
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`applicationDidFinishLaunching`(_ `aNotification`: Notification) -> Void", arguments: arguments)
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (Notification) -> Void, Void>(mock: self, invocation: invocation)
  }

  // MARK: Mocked `applicationWillTerminate`(_ `aNotification`: Notification)

  public override func `applicationWillTerminate`(_ `aNotification`: Notification) -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`applicationWillTerminate`(_ `aNotification`: Notification) -> Void", arguments: [Mockingbird.ArgumentMatcher(`aNotification`)])
    mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? (Notification) -> Void {
        concreteImplementation(`aNotification`)
      } else if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `applicationWillTerminate`(_ `aNotification`: @escaping @autoclosure () -> Notification) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (Notification) -> Void, Void> {
    let arguments: [Mockingbird.ArgumentMatcher] = [Mockingbird.resolve(`aNotification`)]
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`applicationWillTerminate`(_ `aNotification`: Notification) -> Void", arguments: arguments)
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (Notification) -> Void, Void>(mock: self, invocation: invocation)
  }
}

/// Initialize an initializable class mock of `MockingSampleApp_macOS.AppDelegate`.
public func mock(_ type: MockingSampleApp_macOS.AppDelegate.Type, file: StaticString = #file, line: UInt = #line) -> AppDelegateMock.InitializerProxy.Type {
  return AppDelegateMock.InitializerProxy.self
}

// MARK: - Mocked Bird

public final class BirdMock: MockingSampleApp_macOS.Bird, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.12.0", "module_name": "MockingSampleApp_macOS"])
  public var sourceLocation: Mockingbird.SourceLocation? {
    get { return stubbingContext.sourceLocation }
    set {
      stubbingContext.sourceLocation = newValue
      BirdMock.staticMock.stubbingContext.sourceLocation = newValue
    }
  }

  // MARK: Mocked canChirp

  override public var `canChirp`: Bool {
    get {
      let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "canChirp.get", arguments: [])
      return mockingContext.didInvoke(invocation) { () -> Bool in
        let implementation = stubbingContext.implementation(for: invocation)
        if let concreteImplementation = implementation as? () -> Bool {
          return concreteImplementation()
        } else if let defaultValue = stubbingContext.defaultValueProvider.provideValue(for: (Bool).self) {
          return defaultValue
        } else {
          fatalError(stubbingContext.failTest(for: invocation))
        }
      }
    }
    set {
      let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "canChirp.set", arguments: [ArgumentMatcher(newValue)])
      mockingContext.didInvoke(invocation)
      let implementation = stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? (Bool) -> Void {
        concreteImplementation(newValue)
      } else {
        (implementation as? () -> Void)?()
      }
    }
  }

  public func getCanChirp() -> Mockingbird.Mockable<Mockingbird.VariableDeclaration, () -> Bool, Bool> {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "canChirp.get", arguments: [])
    return Mockingbird.Mockable<Mockingbird.VariableDeclaration, () -> Bool, Bool>(mock: self, invocation: invocation)
  }

  public func setCanChirp(_ newValue: @escaping @autoclosure () -> Bool) -> Mockingbird.Mockable<Mockingbird.VariableDeclaration, (Bool) -> Void, Void> {
    let arguments: [Mockingbird.ArgumentMatcher] = [Mockingbird.resolve(newValue)]
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "canChirp.set", arguments: arguments)
    return Mockingbird.Mockable<Mockingbird.VariableDeclaration, (Bool) -> Void, Void>(mock: self, invocation: invocation)
  }

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    super.init()
    Mockingbird.checkVersion(for: self)
    self.sourceLocation = sourceLocation
  }

  // MARK: Mocked `fly`()

  public override func `fly`() -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`fly`() -> Void", arguments: [])
    mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      } else if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `fly`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`fly`() -> Void", arguments: [])
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void>(mock: self, invocation: invocation)
  }
}

/// Initialize a class mock of `MockingSampleApp_macOS.Bird`.
public func mock(_ type: MockingSampleApp_macOS.Bird.Type, file: StaticString = #file, line: UInt = #line) -> BirdMock {
  return BirdMock(sourceLocation: SourceLocation(file, line))
}

// MARK: - Mocked ViewController

public final class ViewControllerMock: MockingSampleApp_macOS.ViewController, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.12.0", "module_name": "MockingSampleApp_macOS"])
  public var sourceLocation: Mockingbird.SourceLocation? {
    get { return stubbingContext.sourceLocation }
    set {
      stubbingContext.sourceLocation = newValue
      ViewControllerMock.staticMock.stubbingContext.sourceLocation = newValue
    }
  }

  public enum InitializerProxy {}

  // MARK: Mocked representedObject

  override public var `representedObject`: Any? {
    get {
      let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "representedObject.get", arguments: [])
      return mockingContext.didInvoke(invocation) { () -> Any? in
        let implementation = stubbingContext.implementation(for: invocation)
        if let concreteImplementation = implementation as? () -> Any? {
          return concreteImplementation()
        } else if let defaultValue = stubbingContext.defaultValueProvider.provideValue(for: (Any?).self) {
          return defaultValue
        } else {
          fatalError(stubbingContext.failTest(for: invocation))
        }
      }
    }
    set {
      let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "representedObject.set", arguments: [ArgumentMatcher(newValue)])
      mockingContext.didInvoke(invocation)
      let implementation = stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? (Any?) -> Void {
        concreteImplementation(newValue)
      } else {
        (implementation as? () -> Void)?()
      }
    }
  }

  public func getRepresentedObject() -> Mockingbird.Mockable<Mockingbird.VariableDeclaration, () -> Any?, Any?> {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "representedObject.get", arguments: [])
    return Mockingbird.Mockable<Mockingbird.VariableDeclaration, () -> Any?, Any?>(mock: self, invocation: invocation)
  }

  public func setRepresentedObject(_ newValue: @escaping @autoclosure () -> Any?) -> Mockingbird.Mockable<Mockingbird.VariableDeclaration, (Any?) -> Void, Void> {
    let arguments: [Mockingbird.ArgumentMatcher] = [Mockingbird.resolve(newValue)]
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "representedObject.set", arguments: arguments)
    return Mockingbird.Mockable<Mockingbird.VariableDeclaration, (Any?) -> Void, Void>(mock: self, invocation: invocation)
  }

  // MARK: Mocked `viewDidLoad`()

  public override func `viewDidLoad`() -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`viewDidLoad`() -> Void", arguments: [])
    mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      } else if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `viewDidLoad`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`viewDidLoad`() -> Void", arguments: [])
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void>(mock: self, invocation: invocation)
  }
}

/// Initialize an initializable class mock of `MockingSampleApp_macOS.ViewController`.
public func mock(_ type: MockingSampleApp_macOS.ViewController.Type, file: StaticString = #file, line: UInt = #line) -> ViewControllerMock.InitializerProxy.Type {
  return ViewControllerMock.InitializerProxy.self
}
